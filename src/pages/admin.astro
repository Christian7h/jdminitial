---
//admin.astro
import { db, Post, PostImage, Comment, User, eq } from "astro:db";
import Layout from "../layouts/Layout.astro";

const user = Astro.locals.user;

// Verificar si el usuario está autenticado y tiene el rol adecuado 
const authorizedUsernames = ["admin", "test","superadmin"]; 
  if (!user || !authorizedUsernames.includes(user.username)) { return Astro.redirect("/signin"); }

// Función para eliminar un post, usuario o comentario
if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const postId = formData.get('postId');
  const userId = formData.get('userId');
  const commentId = formData.get('commentId');
  
  if (typeof postId === 'string') {
    try {
      // Eliminar las imágenes relacionadas con el post
      await db.delete(PostImage).where(eq(PostImage.postId, postId));
      // Eliminar los comentarios relacionados con el post
      await db.delete(Comment).where(eq(Comment.postId, postId));
      // Eliminar el post
      await db.delete(Post).where(eq(Post.id, postId));
    } catch (error) {
      console.error("Error al eliminar el post:", error);
    }
  }

  if (typeof userId === 'string') {
    try {
      // Eliminar los comentarios relacionados con el usuario
      await db.delete(Comment).where(eq(Comment.userId, userId));
      // Eliminar los posts relacionados con el usuario
      const userPosts = await db.select().from(Post).where(eq(Post.userId, userId));
      for (const post of userPosts) {
        await db.delete(PostImage).where(eq(PostImage.postId, post.id));
        await db.delete(Comment).where(eq(Comment.postId, post.id));
        await db.delete(Post).where(eq(Post.id, post.id));
      }
      // Eliminar el usuario
      await db.delete(User).where(eq(User.id, userId));
    } catch (error) {
      console.error("Error al eliminar el usuario:", error);
    }
  }

  if (typeof commentId === 'string') {
    try {
      await db.delete(Comment).where(eq(Comment.id, commentId));
    } catch (error) {
      console.error("Error al eliminar el comentario:", error);
    }
  }
}

// Obtener los datos actuales desde la base de datos
const posts = await db.select().from(Post);
const users = await db.select().from(User);
const comments = await db.select().from(Comment);
---

<Layout title="Admin Dashboard">
  <section class="bg-gray-800 p-4 rounded-lg shadow-lg mb-4">
    <h2 class="text-white text-xl mb-4">Gestión de Posts</h2>
    <input type="text" placeholder="Buscar posts..." class="p-2 mb-4 bg-gray-700 text-white rounded-lg w-full" oninput="filterPosts(event)">
    <ul id="post-list">
      {posts.map((post) => (
        <li class="mb-2">
          <span class="text-white">{post.content}</span>
          <span class="text-gray-400 text-sm"> - {new Date(post.createdAt).toLocaleString()}</span>
          <!-- Formulario para eliminar el post -->
          <form method="POST" class="inline-block ml-2" onsubmit="return showModal('¿Estás seguro de que deseas eliminar este post? Esto también eliminará los comentarios relacionados.', this)">
            <input type="hidden" name="postId" value={post.id} />
            <button type="submit" class="delete-button bg-red-600 text-white p-2 rounded-lg">Eliminar</button>
          </form>
        </li>
      ))}
    </ul>
  </section>

  <section class="bg-gray-800 p-4 rounded-lg shadow-lg mb-4">
    <h2 class="text-white text-xl mb-4">Gestión de Usuarios</h2>
    <input type="text" placeholder="Buscar usuarios..." class="p-2 mb-4 bg-gray-700 text-white rounded-lg w-full" oninput="filterUsers(event)">
    <ul id="user-list">
      {users.map((user) => (
        <li class="mb-2">
          <span class="text-white">{user.username}</span>
          <span class="text-gray-400 text-sm"> - {user.id}</span>
          <!-- Formulario para eliminar el usuario -->
          <form method="POST" class="inline-block ml-2" onsubmit="return showModal('¿Estás seguro de que deseas eliminar este usuario? Esto también eliminará los posts y comentarios relacionados.', this)">
            <input type="hidden" name="userId" value={user.id} />
            <button type="submit" class="delete-button bg-red-600 text-white p-2 rounded-lg">Eliminar</button>
          </form>
        </li>
      ))}
    </ul>
  </section>

  <section class="bg-gray-800 p-4 rounded-lg shadow-lg mb-4">
    <h2 class="text-white text-xl mb-4">Gestión de Comentarios</h2>
    <input type="text" placeholder="Buscar comentarios..." class="p-2 mb-4 bg-gray-700 text-white rounded-lg w-full" oninput="filterComments(event)">
    <ul id="comment-list">
      {comments.map((comment) => (
        <li class="mb-2">
          <span class="text-white">{comment.content}</span>
          <span class="text-gray-400 text-sm"> - {new Date(comment.createdAt).toLocaleString()}</span>
          <!-- Formulario para eliminar el comentario -->
          <form method="POST" class="inline-block ml-2" onsubmit="return showModal('¿Estás seguro de que deseas eliminar este comentario?', this)">
            <input type="hidden" name="commentId" value={comment.id} />
            <button type="submit" class="delete-button bg-red-600 text-white p-2 rounded-lg">Eliminar</button>
          </form>
        </li>
      ))}
    </ul>
  </section>

  <!-- Modal de advertencia -->
  <div id="modal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden">
    <div class="bg-gray-800 p-4 rounded-lg shadow-lg">
      <p id="modal-message" class="text-white mb-4"></p>
      <div class="flex justify-end">
        <button onclick="hideModal()" class="bg-gray-600 text-white p-2 rounded-lg mr-2">Cancelar</button>
        <button id="modal-confirm" class="bg-red-600 text-white p-2 rounded-lg">Confirmar</button>
      </div>
    </div>
  </div>
</Layout>

<style>
  body {
    background-color: #0f1923;
    color: #ece8e1;
    font-family: 'Valorant', sans-serif;
  }
  header, footer {
    background-color: #ff4655;
    color: #ece8e1;
    padding: 1rem;
    text-align: center;
  }
  nav a {
    color: #ece8e1;
    text-decoration: none;
    margin: 0 1rem;
  }
  nav a:hover {
    text-decoration: underline;
  }
  .delete-button {
    background-color: #ff4655;
    color: #ece8e1;
    border: none;
    padding: 0.5rem 1rem;
    cursor: pointer;
  }
  .delete-button:hover {
    background-color: #d43f4a;
  }
</style>

<script is:inline>
  let formToSubmit = null;

  function filterPosts(event) {
    const filter = event.target.value;
    const posts = document.querySelectorAll('#post-list li');
    posts.forEach(post => {
      const content = post.querySelector('span').textContent;
      if (content.includes(filter)) {
        post.style.display = '';
      } else {
        post.style.display = 'none';
      }
    });
  }

  function filterUsers(event) {
    const filter = event.target.value;
    const users = document.querySelectorAll('#user-list li');
    users.forEach(user => {
      const username = user.querySelector('span').textContent;
      if (username.includes(filter)) {
        user.style.display = '';
      } else {
        user.style.display = 'none';
      }
    });
  }

  function filterComments(event) {
    const filter = event.target.value;
    const comments = document.querySelectorAll('#comment-list li');
    comments.forEach(comment => {
      const content = comment.querySelector('span').textContent;
      if (content.includes(filter)) {
        comment.style.display = '';
      } else {
        comment.style.display = 'none';
      }
    });
  }

  function showModal(message, form) {
    document.getElementById('modal-message').textContent = message;
    document.getElementById('modal').classList.remove('hidden');
    formToSubmit = form;
    return false;
  }

  function hideModal() {
    document.getElementById('modal').classList.add('hidden');
    formToSubmit = null;
  }

  document.getElementById('modal-confirm').addEventListener('click', function() {
    if (formToSubmit) {
      formToSubmit.submit();
    }
    hideModal();
  });
</script>
