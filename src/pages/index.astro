---
// src/pages/index.astro
import { server } from "../actions/index";

import Layout from "../layouts/Layout.astro";
import { getSession } from "auth-astro/server";
import {
  db,
  User,
  Role,
  Post,
  PostImage,
  Comment,
  Comments,
  Author,
  eq,
} from "astro:db";

const session = await getSession(Astro.request);

// Obtener publicaciones con la informaciÃ³n del usuario
const dbPosts = await db
  .select()
  .from(Post)
  .innerJoin(PostImage, eq(Post.id, PostImage.postId))
  .innerJoin(Comment, eq(Post.id, Comment.postId))
  .innerJoin(User, eq(Post.userId, User.id));

// Obtener comentarios con la informaciÃ³n del usuario
const dbComments = await db
  .select()
  .from(Comment)
  .innerJoin(User, eq(Comment.userId, User.id));

//

// Render the new list of comments on each request
const comments = await db
  .select()
  .from(Comments)
  .innerJoin(Author, eq(Comments.authorId, Author.id));
  if (Astro.request.method === 'POST') {
  const formData = await Astro.request.formData();
  const authorName = formData.get('author');  // El nombre del autor
  const body = formData.get('body');          // El cuerpo del comentario
  
  // Verificar que el autor y el cuerpo sean cadenas
  if (typeof authorName === 'string' && typeof body === 'string') {
    // Comprobar si el autor ya existe en la base de datos
    let authorId;
    const existingAuthor = await db
      .select()
      .from(Author)
      .where(eq(Author.name, authorName))  // Usar eq para comparar
      .limit(1)
      .execute();
    
    if (existingAuthor.length > 0) {
      authorId = existingAuthor[0].id;
    } else {
      // Insertar el nuevo autor y obtener su id
      const newAuthor = await db.insert(Author).values({ name: authorName }).returning().execute();
      authorId = newAuthor[0].id;  // Obtener el ID del autor reciÃ©n insertado
    }

    // Insertar el comentario con el authorId y body
    await server.addComment({ authorId, body }); // Llamar a la acciÃ³n correctamente
  }
}
---

<Layout title="JDM Social Network">
  {
    session ? (
      <h1>Â¡Bienvenido, {session.user?.name}! ðŸš—ðŸ’¨</h1>
    ) : (
      <h1>Â¡Bienvenido a JDM Social Network! ðŸš—ðŸ’¨</h1>
    )
  }
  <form method="POST" style="display: grid; gap: 1rem;">
    <label for="author">Author Name</label>
    <input id="author" name="author" type="text" required />

    <label for="body">Body</label>
    <textarea id="body" name="body" required></textarea>

    <button type="submit">Submit</button>
  </form>

  <h2>Comments</h2>
  {
    comments.map(({ Author, Comments }) => (
      <article>
        <p>Author: <strong>{Author.name}</strong></p>
        <p>{Comments.body}</p>
      </article>
    ))
  }
</Layout>
<p class="pstyle">
  Â¡ConÃ©ctate con entusiastas del JDM de todo el mundo! desde Bocchih
</p>

<div class="posts-container">
  {
    dbPosts.map(({ Post, User, PostImage }) => (
      <article id={`post-${Post.id}`} class="post">
        <header>
          <div class="user-info">
            <strong>@{User.username}</strong>
            <span class="timestamp">
              {new Date(Post.createdAt).toLocaleString()}
            </span>
          </div>
        </header>

        <p class="post-content">{Post.content}</p>
        <img
          class="post-image"
          src={PostImage.imageUrl}
          width="565"
          height="330"
          alt="Post image"
        />
        <footer>
          <div class="comments">
            <h3>Comentarios:</h3>
            {dbComments
              .filter((comment) => comment.Comment.postId === Post.id)
              .map(({ Comment, User }) => (
                <div class="comment">
                  <strong>@{User.username}:</strong>
                  <p>{Comment.content}</p>
                  <span class="comment-time">
                    {new Date(Comment.createdAt).toLocaleString()}
                  </span>
                </div>
              ))}
          </div>
        </footer>
      </article>
    ))
  }
</div>

<style>
  .pstyle {
    text-align: center;
  }
  h1 {
    text-align: center;
    font-size: 2.5rem;
    margin: 1rem 0;
    color: #ffff;
    text: wrap;
  }

  .posts-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    margin: 2rem auto;
    max-width: 700px;
    font-family: "Arial", sans-serif;
  }

  .post {
    background: #4cb7e1;
    border: 1px solid #ddd;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }

  .post:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .post header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
  }

  .user-info {
    display: flex;
    flex-direction: column;
    font-size: 0.9rem;
  }

  .user-info strong {
    color: #555;
    font-size: 1.2rem;
  }

  .timestamp {
    margin-top: 1rem;
    color: #ffff;
    font-size: 0.8rem;
  }

  .post-content {
    font-size: 1rem;
    line-height: 1.6;
    color: #333;
    margin-bottom: 1rem;
  }

  .post-image {
    width: 100%;
    border-radius: 10px;
    margin-top: 1rem;
    object-fit: cover;
  }

  footer {
    margin-top: 2rem;
    border-top: 1px solid #ddd;
    padding-top: 1rem;
  }

  .comments {
    margin-top: 1rem;
  }

  .comments h3 {
    font-size: 1.1rem;
    font-weight: bold;
    color: #333;
  }

  .comment {
    background: #f9f9f9;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .comment strong {
    color: #444;
    font-size: 1rem;
  }

  .comment p {
    font-size: 0.95rem;
    color: #333;
  }

  .comment-time {
    display: block;
    margin-top: 0.5rem;
    font-size: 0.8rem;
    color: #888;
  }
</style>
