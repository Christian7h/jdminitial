---
//src/components/BodyPost.astro
import { nanoid } from "nanoid";
import { db, User, Post, PostImage,Role, Comment, eq, sql, desc } from "astro:db";
import PostComponent from "../components/PostComponent.jsx"; // Importa el componente
const user = Astro.locals.user;


if (Astro.request.method === "POST" && user) {
  const formData = await Astro.request.formData();
  const content = formData.get("content");
  const imageUrl = formData.get("imageUrl") || ""; 

  if (typeof content === "string" && content.trim()) {
    const postId = nanoid(); 
    await db.insert(Post).values([{
      id: postId,
      userId: user.id,
      content: content,
      imageUrl: imageUrl,
      createdAt: sql`CURRENT_TIMESTAMP`,
    }]);

    if (imageUrl) {
      await db.insert(PostImage).values([{
        id: nanoid(), 
        postId: postId, 
        imageUrl: imageUrl,
      }]);
    }
  }

  const commentContent = formData.get("commentContent");
  const postId = formData.get("postId");

  if (typeof commentContent === "string" && commentContent.trim() && postId) {
    const commentId = nanoid();
    await db.insert(Comment).values([{
      id: commentId,
      postId: postId, 
      userId: user.id, 
      content: commentContent,
      createdAt: sql`CURRENT_TIMESTAMP`,
    }]);
  }
}

const soloPosts = await db
  .select()
  .from(Post)
  .innerJoin(User, eq(Post.userId, User.id))
  .innerJoin(Role, eq(User.roleId, Role.id)) 
  .orderBy(desc(Post.createdAt));
// 
const dbComments = await db
  .select()
  .from(Comment)
  .innerJoin(User, eq(Comment.userId, User.id))
  .innerJoin(Role, eq(User.roleId, Role.id))  
  .orderBy(desc(Comment.createdAt));
---

{user ? (
  <form method="POST" class="space-y-4 p-6 max-w-3xl mx-auto bg-gray-800 rounded-lg shadow-lg" onsubmit="handleSubmit(event)">
    <label for="content" class="block text-white text-lg font-semibold">Contenido del Post</label>
    <textarea
      id="content"
      name="content"
      required
      class="w-full p-4 bg-gray-700 text-white rounded-lg shadow-md focus:ring-2 focus:ring-red-600"
    ></textarea>

    <label for="imageUrl" class="block text-white text-lg font-semibold">URL de la Imagen (Opcional)</label>
    <input
      type="text"
      id="imageUrl"
      name="imageUrl"
      placeholder="URL de la imagen"
      class="w-full p-4 bg-gray-700 text-white rounded-lg shadow-md focus:ring-2 focus:ring-red-600"
    />

    <button type="submit" class="w-full bg-red-600 text-white py-3 rounded-lg hover:bg-red-700 transition duration-200">
      Publicar
    </button>
  </form>
) : (
  <p class="text-red-500 text-center">Debes iniciar sesiÃ³n para publicar un post.</p>
)}

<h1 class="text-white text-2xl mt-6 text-center">
  Â¡Bienvenido, {user ? user.username : "visitante"} ðŸš—ðŸ’¨!
</h1>

<section class="mt-8">
  <h2 class="text-white text-2xl mb-6">Posts Recientes</h2>
  {soloPosts.length === 0 ? (
    <p class="text-white text-center">No hay posts aÃºn. Â¡SÃ© el primero en publicar!</p>
  ) : (
    soloPosts.map((post) => {
      const comments = dbComments.filter(comment => comment.Comment.postId === post.Post.id);

      return (
        <div data-key={post.Post.id} class="mb-8">
         <PostComponent
            post={post.Post}
            user={post.User} 
            comments={comments}
            role={post.Role}
            client:only="react"
          />

          <form method="POST" class="mt-4" onsubmit="handleCommentSubmit(event)">
            <input type="hidden" name="postId" value={post.Post.id} />
            <textarea
              name="commentContent"
              placeholder="Escribe un comentario..."
              required
              class="w-full p-4 bg-gray-700 text-white rounded-lg shadow-md focus:ring-2 focus:ring-red-600"
            ></textarea>

            <button type="submit" class="mt-2 w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition duration-200">
              Comentar
            </button>
          </form>
        </div>
      );
    })
  )}
</section>

<script is:inline>
  function handleSubmit(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);

    fetch(form.action, {
      method: 'POST',
      body: formData,
    })
    .then(response => {
      if (response.ok) {
        window.location.reload();
      } else {
        // Manejar errores
        alert('Error al publicar el post');
      }
    })
    .catch(error => {
      // Manejar errores
      alert('Error al publicar el post');
    });
  }

  function handleCommentSubmit(event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);

    fetch(form.action, {
      method: 'POST',
      body: formData,
    })
    .then(response => {
      if (response.ok) {
        window.location.reload();
      } else {
        alert('Error al publicar el comentario');
      }
    })
    .catch(error => {
      alert('Error al publicar el comentario');
    });
  }
</script>
