---
//src/components/BodyPost.astro
import { nanoid } from "nanoid";
import { db, User, Post, PostImage, Comment, eq, sql, desc } from "astro:db";
import PostComponent from "../components/PostComponent.jsx"; // Importa el componente
import PostsFeed from "./PostsFeed";
const user = Astro.locals.user;


// Solo permitir la creaciÃ³n de un post si el usuario estÃ¡ logueado
if (Astro.request.method === "POST" && user) {
  const formData = await Astro.request.formData();
  const content = formData.get("content");
  const imageUrl = formData.get("imageUrl") || ""; // Asegurarse de que imageUrl sea una cadena vacÃ­a si es null

  if (typeof content === "string" && content.trim()) {
    // Crear un nuevo post
    const postId = nanoid(); // Usamos nanoid para generar un ID Ãºnico
    await db.insert(Post).values([{
      id: postId,
      userId: user.id, // ID del usuario que estÃ¡ publicando
      content: content,
      imageUrl: imageUrl,
      createdAt: sql`CURRENT_TIMESTAMP`,
    }]);

    // Insertar en la tabla PostImage si hay una URL de imagen
    if (imageUrl) {
      await db.insert(PostImage).values([{
        id: nanoid(), // Generar un ID Ãºnico para la imagen
        postId: postId, // Relacionar la imagen con el post
        imageUrl: imageUrl,
      }]);
    }
  }

  // Agregar un comentario a un post especÃ­fico
  const commentContent = formData.get("commentContent");
  const postId = formData.get("postId");

  if (typeof commentContent === "string" && commentContent.trim() && postId) {
    // Insertar un nuevo comentario
    const commentId = nanoid();
    await db.insert(Comment).values([{
      id: commentId,
      postId: postId, // Asociar el comentario con el post
      userId: user.id, // Usuario que hizo el comentario
      content: commentContent,
      createdAt: sql`CURRENT_TIMESTAMP`,
    }]);
  }
}
// Consultar los posts y sus relaciones (tambiÃ©n incluye los comentarios)
const soloPosts = await db
  .select()
  .from(Post)
  .innerJoin(User, eq(Post.userId, User.id)) // Para obtener la informaciÃ³n del usuario que creÃ³ el post
  .orderBy(desc(Post.createdAt));

// Consultar los comentarios y sus relaciones
const dbComments = await db
  .select()
  .from(Comment)
  .innerJoin(User, eq(Comment.userId, User.id)) // Para obtener el usuario que hizo el comentario
  .orderBy(desc(Comment.createdAt)); // Opcional: ordena los comentarios por fecha
console.log("Comentarios de la DB:", dbComments);
---
{user ? (
<form method="POST" class="space-y-4 p-6 max-w-3xl mx-auto bg-gray-800 rounded-lg shadow-lg">
    <h1 class=" text-red-500 text-2xl font-semibold">    Â¡Para publicar, debes estar logueado!    </h1>
    <label for="content" class="block text-white text-lg font-semibold">Contenido del Post</label>
    <textarea
      id="content"
      name="content"
      required
      class="w-full p-4 bg-gray-700 text-white rounded-lg shadow-md focus:ring-2 focus:ring-red-600"
    ></textarea>

    <label for="imageUrl" class="block text-white text-lg font-semibold">URL de la Imagen (Opcional)</label>
    <input
      type="text"
      id="imageUrl"
      name="imageUrl"
      placeholder="URL de la imagen"
      class="w-full p-4 bg-gray-700 text-white rounded-lg shadow-md focus:ring-2 focus:ring-red-600"
    />

    <button type="submit" class="w-full bg-red-600 text-white py-3 rounded-lg hover:bg-red-700 transition duration-200">
      Publicar
    </button>
  </form>
)  :(
<p class="text-red-500 text-center">Debes iniciar sesiÃ³n para publicar un post.</p>
)
}


  {user ? (
    <h1 class="text-white text-2xl mt-6 text-center">Â¡Bienvenido, {user.username} ðŸš—ðŸ’¨</h1>
  ) : (
    <h1 class="text-white text-2xl mt-6 text-center">Â¡Bienvenido a JDM Social Network! ðŸš—ðŸ’¨</h1>
  )}

  <section class="mt-8">
    <h2 class="text-white text-2xl mb-6">Posts Recientes</h2>
    {soloPosts.length === 0 ? (
      <p class="text-white text-center">No hay posts aÃºn. Â¡SÃ© el primero en publicar!</p>
    ) : (
      soloPosts.map((post) => {
        console.log("Post data:", post);  // Verifica que el post tenga la estructura correcta
        // Filtrar los comentarios relacionados con el post actual
        const comments = dbComments.filter(comment => comment.Comment.postId === post.Post.id);

        return (
          <div class="mb-8">
            <PostComponent
              post={post.Post}
              user={post.User}
              comments={comments}
              client:only="react"
            />

            {/* Formulario para agregar un comentario */}
            <form method="POST" class="mt-4">
              <input type="hidden" name="postId" value={post.Post.id} />
              <textarea
                name="commentContent"
                placeholder="Escribe un comentario..."
                required
                class="w-full p-4 bg-gray-700 text-white rounded-lg shadow-md focus:ring-2 focus:ring-red-600"
              ></textarea>

              <button type="submit" class="mt-2 w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition duration-200">
                Comentar
              </button>
            </form>
          </div>
        );
      })
    )}
  </section>
